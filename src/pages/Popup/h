import { useEffect, useState } from 'react';
import './Popup.css';
import { STORAGE_KEY, TWITTER_URL, PRIVATE_KEY } from '../../../utils/constant';
import SwitchBtn from '../../components/SwitchBtn';

const Popup = () => {
  const [pk, setPk] = useState('');
  const [err, setErr] = useState('');
  const [isViewStat, setViewStat] = useState(false);

  const onClickSwitch = () => {
    setViewStat((prev) => {
      chrome.storage.local.set({ [STORAGE_KEY]: !prev });
      return !prev;
    });
  };

  const onChangePk = (e) => {
    let value = e.target.value;
    console.log(value);
    if (value.length < 66) {
      setErr('Private Key must be 66 characters long');
    } else if (value.slice(0, 2) !== '0x') {
      setErr('Private Key must start with 0x');
    } else {
      setPk(value);
      // chrome.storage.local.set({ [PRIVATE_KEY]: value });
    }
  };

  // useEffect(() => {
  //   chrome.storage.local.get(PRIVATE_KEY).then((values) => {
  //     if (values.hasOwnProperty(PRIVATE_KEY)) {
  //       setPk(values[PRIVATE_KEY]);
  //     } else {
  //       chrome.storage.local.set({ [PRIVATE_KEY]: pk });
  //     }
  //   });
  //   // eslint-disable-next-line react-hooks/exhaustive-deps
  // }, []);

  useEffect(() => {
    chrome.storage.local.get(STORAGE_KEY).then((values) => {
      if (values.hasOwnProperty(STORAGE_KEY)) {
        setViewStat(values[STORAGE_KEY]);
      } else {
        setViewStat(true);
        chrome.storage.local.set({ [STORAGE_KEY]: true });
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <main className="container">
      <header className="header">
        <h1 className="c-white fs-xl">{`Trading Xtension`}</h1>
        <h1 className="c-white fs-md">{`The Chrome extension for DeFi in Twitter`}</h1>
      </header>

      <section className="section">
        <div className="flex">
          <div className="c-white fs-md">{`Enter your private key`}</div>
          <input
            type="text"
            onChange={onChangePk}
            className="input"
            placeholder="Enter private key"
          />
          {err && <div className="c-red fs-xs">{err}</div>}
        </div>
        {isViewStat !== null && (
          <div onClick={() => onClickSwitch()} className="c-white fs-md">
            {`Turn ${isViewStat ? 'Off' : 'On'} Widget`}{' '}
            <SwitchBtn isChecked={isViewStat} />
          </div>
        )}
      </section>

      <footer className="footer">
        <a
          href={`${TWITTER_URL}`}
          target="_blank"
          className="c-gray fs-xs"
          rel="noreferrer"
        >{`Follow Trading Xtension on X`}</a>
      </footer>
    </main>
  );
};

export default Popup;
